// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionExecutor is a mock of TransactionExecutor interface.
type MockTransactionExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionExecutorMockRecorder
}

// MockTransactionExecutorMockRecorder is the mock recorder for MockTransactionExecutor.
type MockTransactionExecutorMockRecorder struct {
	mock *MockTransactionExecutor
}

// NewMockTransactionExecutor creates a new mock instance.
func NewMockTransactionExecutor(ctrl *gomock.Controller) *MockTransactionExecutor {
	mock := &MockTransactionExecutor{ctrl: ctrl}
	mock.recorder = &MockTransactionExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionExecutor) EXPECT() *MockTransactionExecutorMockRecorder {
	return m.recorder
}

// WithTransaction mocks base method.
func (m *MockTransactionExecutor) WithTransaction(fn func(*sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockTransactionExecutorMockRecorder) WithTransaction(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockTransactionExecutor)(nil).WithTransaction), fn)
}
