// Code generated by MockGen. DO NOT EDIT.
// Source: medicine_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "go-layered-architecture-sample/internal/domain/entity"
	rdb "go-layered-architecture-sample/internal/gateway/rdb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMedicineRepository is a mock of MedicineRepository interface.
type MockMedicineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMedicineRepositoryMockRecorder
}

// MockMedicineRepositoryMockRecorder is the mock recorder for MockMedicineRepository.
type MockMedicineRepositoryMockRecorder struct {
	mock *MockMedicineRepository
}

// NewMockMedicineRepository creates a new mock instance.
func NewMockMedicineRepository(ctrl *gomock.Controller) *MockMedicineRepository {
	mock := &MockMedicineRepository{ctrl: ctrl}
	mock.recorder = &MockMedicineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMedicineRepository) EXPECT() *MockMedicineRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMedicineRepository) Create(ctx context.Context, medicine *entity.Medicine) (*entity.Medicine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, medicine)
	ret0, _ := ret[0].(*entity.Medicine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMedicineRepositoryMockRecorder) Create(ctx, medicine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMedicineRepository)(nil).Create), ctx, medicine)
}

// Delete mocks base method.
func (m *MockMedicineRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMedicineRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMedicineRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockMedicineRepository) Find(ctx context.Context, params rdb.MedicineFindParams) ([]*entity.Medicine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, params)
	ret0, _ := ret[0].([]*entity.Medicine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMedicineRepositoryMockRecorder) Find(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMedicineRepository)(nil).Find), ctx, params)
}

// GetByID mocks base method.
func (m *MockMedicineRepository) GetByID(ctx context.Context, id int) (*entity.Medicine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Medicine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMedicineRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMedicineRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockMedicineRepository) Update(ctx context.Context, medicine *entity.Medicine) (*entity.Medicine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, medicine)
	ret0, _ := ret[0].(*entity.Medicine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMedicineRepositoryMockRecorder) Update(ctx, medicine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMedicineRepository)(nil).Update), ctx, medicine)
}
