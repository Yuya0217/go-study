/*
薬情報 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Medicine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Medicine{}

// Medicine struct for Medicine
type Medicine struct {
	// 薬のID
	Id int `json:"id"`
	// 薬の名前
	MedicineName string `json:"medicineName"`
	// 薬のタイプ
	MedicineType string `json:"medicineType"`
}

// NewMedicine instantiates a new Medicine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicine(id int, medicineName string, medicineType string) *Medicine {
	this := Medicine{}
	this.Id = id
	this.MedicineName = medicineName
	this.MedicineType = medicineType
	return &this
}

// NewMedicineWithDefaults instantiates a new Medicine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicineWithDefaults() *Medicine {
	this := Medicine{}
	return &this
}

// GetId returns the Id field value
func (o *Medicine) GetId() int {
	if o == nil {
		var ret int
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Medicine) GetIdOk() (*int, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Medicine) SetId(v int) {
	o.Id = v
}

// GetMedicineName returns the MedicineName field value
func (o *Medicine) GetMedicineName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MedicineName
}

// GetMedicineNameOk returns a tuple with the MedicineName field value
// and a boolean to check if the value has been set.
func (o *Medicine) GetMedicineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MedicineName, true
}

// SetMedicineName sets field value
func (o *Medicine) SetMedicineName(v string) {
	o.MedicineName = v
}

// GetMedicineType returns the MedicineType field value
func (o *Medicine) GetMedicineType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MedicineType
}

// GetMedicineTypeOk returns a tuple with the MedicineType field value
// and a boolean to check if the value has been set.
func (o *Medicine) GetMedicineTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MedicineType, true
}

// SetMedicineType sets field value
func (o *Medicine) SetMedicineType(v string) {
	o.MedicineType = v
}

func (o Medicine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Medicine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["medicineName"] = o.MedicineName
	toSerialize["medicineType"] = o.MedicineType
	return toSerialize, nil
}

type NullableMedicine struct {
	value *Medicine
	isSet bool
}

func (v NullableMedicine) Get() *Medicine {
	return v.value
}

func (v *NullableMedicine) Set(val *Medicine) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicine) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicine(val *Medicine) *NullableMedicine {
	return &NullableMedicine{value: val, isSet: true}
}

func (v NullableMedicine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


